<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
   This is an example of a simple "solr.xml" file for configuring one or 
   more Solr Cores, as well as allowing Cores to be added, removed, and 
   reloaded via HTTP requests.

   More information about options available in this configuration file, 
   and Solr Core administration can be found online:
   http://wiki.apache.org/solr/CoreAdmin
   
   See also https://cwiki.apache.org/confluence/display/solr/Format+of+solr.xml
-->

<!-- Substituting JVM System Properties -- syntax: ${propertyname:option_default_value}
	JVM system properties can be set:
		- on the command line using -Dproperty=value (which will override values in config)
		- in core.properties files in subdirectories under SOLR_HOME
-->

<solr>

  <!-- adminHandler - If used, this attribute should be set to the FQN (Fully qualified name) of a class that inherits from CoreAdminHandler. For example, adminHandler="com.myorg.MyAdminHandler" would configure the custom admin handler (MyAdminHandler) to handle admin requests. If this attribute isn't set, Solr uses the default admin handler, org.apache.solr.handler.admin.CoreAdminHandler. For more information on this parameter, see the Solr Wiki at http://wiki.apache.org/solr/CoreAdmin#cores.-->
  <!-- collectionsHandler - As above, for custom CollectionsHandler implementations. -->
  <!-- infoHandler - As above, for custom InfoHandler implementations. -->
  <!-- coreLoadThreads - Specifies the number of threads that will be assigned to load cores in parallel. -->
  <!-- coreRootDirectory - The root of the core discovery tree, defaults to SOLR_HOME. -->
  <!-- managementPath - Currently non-operational. -->
  <!-- sharedLib - Specifies the path to a common library directory that will be shared across all cores. Any JAR files in this directory will be added to the search path for Solr plugins. This path is relative to the top-level container's Solr Home. -->
  <!-- shareSchema - This attribute, when set to true, ensures that the multiple cores pointing to the same schema.xml will be referring to the same IndexSchema Object. Sharing the IndexSchema Object makes loading the core faster. If you use this feature, make sure that no core-specific property is used in your schema.xml. -->
  <!-- transientCacheSize - Defines how many cores with transient=true that can be loaded before swapping the least recently used core for a new core. -->
  <!-- configSetBaseDir - The directory under which configsets for solr cores can be found. Defaults to SOLR_HOME/configsets -->
  
  <solrcloud> <!-- Note:  This section is ignored unless the solr instance is started with either -DzkRun or -DzkHost -->
    <str name="host">${host:}</str> <!-- The hostname Solr uses to access cores. -->
    <int name="hostPort">${jetty.port:8983}</int> <!-- The port Solr uses to access cores. In the default solr.xml file, this is set to ${jetty.port:8983}, which will use the Solr port defined in Jetty, and otherwise fall back to 8983. -->
    <str name="hostContext">${hostContext:solr}</str> <!-- The url context path. -->
    <bool name="genericCoreNodeNames">${genericCoreNodeNames:true}</bool> <!-- If TRUE, node names are not based on the address of the node, but on a generic name that identifies the core. When a different machine takes over serving that core things will be much easier to understand. -->
    <int name="zkClientTimeout">${zkClientTimeout:30000}</int> <!-- A timeout for connection to a ZooKeeper server. It is used with SolrCloud. -->
    <int name="distribUpdateSoTimeout">${distribUpdateSoTimeout:600000}</int> <!-- Used to set the underlying "socketTimeout" for intra-cluster updates. -->
    <int name="distribUpdateConnTimeout">${distribUpdateConnTimeout:60000}</int> <!-- Used to set the underlying "connTimeout" for intra-cluster updates. -->
	<!-- leaderVoteWait - When SolrCloud is starting up, how long each Solr node will wait for all known replicas for that shard to be found before assuming that any nodes that haven't reported are down. -->
	<!-- leaderConflictResolveWait - When trying to elect a leader for a shard, this property sets the maximum time a replica will wait to see conflicting state information to be resolved; temporary conflicts in state information can occur when doing rolling restarts, especially when the node hosting the Overseer is restarted. Typically, the default value of 180000 (ms) is sufficient for conflicts to be resolved; you may need to increase this value if you have hundreds or thousands of small collections in SolrCloud. -->
  </solrcloud>

  <shardHandlerFactory name="shardHandlerFactory"
    class="HttpShardHandlerFactory">
    <int name="socketTimeout">${socketTimeout:600000}</int>
    <int name="connTimeout">${connTimeout:60000}</int>
  </shardHandlerFactory>
  
  <!-- logging -->
    <!-- watcher -->
	  <!-- size - The number of log events that are buffered. -->
	  <!-- threshold - The logging level above which your particular logging implementation will record. For example when using log4j one might specify DEBUG, WARN, INFO, etc. -->
    <!-- class - The class to use for logging. The corresponding JAR file must be available to solr, perhaps through a <lib> directive in solrconfig.xml. -->
	<!-- enabled - true/false - whether to enable logging or not. -->

</solr>
